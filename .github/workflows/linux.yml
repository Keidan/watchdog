# This is a basic workflow to help you get started with Actions

name: Linux

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Ubuntu Latest GCC
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      CMAKE_GENERATOR: "Ninja"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory_linux
      COVERAGE_XML: coverage.xml
      BUILD_DIR: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Install dependencies
        run: |
            sudo apt-get update
            sudo apt-get install cmake ninja-build lcov
            ninja --version
            cmake --version
            gcc --version
      - name: Set up Python 3.8 for gcovr
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install gcovr 5.0
        run: |
          pip install gcovr==5.0 # 5.1 is not supported
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Configure for debug
        shell: bash
        run: cmake -S . -B ${{ env.BUILD_DIR }} -DDISTRIBUTION=debug -G "${{ env.CMAKE_GENERATOR }}"
      - name: Build debug
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }}
      - name: Generate GCOV
        run: |
          cmake --build ${{ env.BUILD_DIR }} --target gcov
      - name: Collect coverage into one XML report
        run: |
          gcovr --exclude-throw-branches --sonarqube > ${{ env.COVERAGE_XML }}
      - name: Cleanup
        run: |
          cmake --build ${{ env.BUILD_DIR }} --target scrub
      - name: Configure for release
        shell: bash
        run: cmake -S . -B ${{ env.BUILD_DIR }} -DDISTRIBUTION=release -G "${{ env.CMAKE_GENERATOR }}"
      - name: Build release
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }}
      - name: Run build-wrapper
        run: |
          cmake --build ${{ env.BUILD_DIR }} --target clean
          cmake -S . -B ${{ env.BUILD_DIR }} -DDISTRIBUTION=debug -G "${{ env.CMAKE_GENERATOR }}"
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{ env.BUILD_DIR }}
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=${{ env.COVERAGE_XML }}
