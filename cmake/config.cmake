#check for config

set(test_xml 1)
set(test_json 1)

if(${DISABLE_XML} MATCHES "yes")
  set(test_xml 0)
elseif("${DISABLE_JSON}" MATCHES "es")
  set(test_json 0)
endif()

if("${test_xml}" MATCHES "1")
  if(EXISTS /usr/include/libxml2)
    find_package(LibXml2)
    if(LIBXML2_FOUND)
      include_directories(${LIBXML2_INCLUDE_DIR})
      list(APPEND ADDITIONAL_LIBS ${LIBXML2_LIBRARIES})
      set(HAVE_XML_H 1)
      message("libxml2 includes: ${LIBXML2_INCLUDE_DIR}")
      message("libxml2 libraries: ${LIBXML2_LIBRARIES}")
    endif(LIBXML2_FOUND)
  else()
      message("/usr/include/libxml2 not found")
  endif()
endif()

if("${test_json}" MATCHES "1")
  if(EXISTS /usr/include/jsoncpp)
    find_package(PkgConfig)
    if(PKG_CONFIG_FOUND)
      pkg_check_modules (JSONCPP jsoncpp)
      if(JSONCPP_FOUND)
	include_directories(${JSONCPP_INCLUDE_DIRS})
	list(APPEND ADDITIONAL_LIBS ${JSONCPP_LIBRARIES})
	set(HAVE_JSON_H 1)
	message("libjsoncpp includes: ${JSONCPP_INCLUDE_DIRS}")
	message("libjsoncpp libraries: ${JSONCPP_LIBRARIES}")
      else(JSONCPP_FOUND)
	message("JSONCPP_FOUND: ${JSONCPP_FOUND}")
      endif(JSONCPP_FOUND)
    else(PKG_CONFIG_FOUND)
      message("PKG_CONFIG not found")
    endif(PKG_CONFIG_FOUND)
  else()
      message("/usr/include/jsoncpp not found")
  endif()
endif()
